'''

ES 150: Problem set 7, question 4

Exercise 4. SIMULATION
In this problem, we are going to simulate some random variables that we have learned in the class. You are free to use any programming language.
a. If we generate random numbers from a distribution with PDF p(x), in n independent trials, we would expect to count roughly nâ€¢ p(z)dx of the numbers in a small interval
14 = (2 - da /2, a + dz/2). Equivalently, count(/s) ~ p(x). In a histogram, we plot a
bar graph of count (In) against the center * of each interval.
Please plot the histogram of N(0, 1) and the theoretical curve of its PDF, i.e., P(2) =
- -23/2. Show they are closed under large enough n.
V2T
b. We know that linear transformation of Gaussian is still Gaussian. Let us numerically verify this property. Generate n points from N(0, 1) and plot the histogram aX + b for some a,b, a + 0. Show it matches the PDF of N(b, a?).
c. Suppose your computer can only generate uniform distribution. To make matter worse, you still need to generate other types of distribution for your homework. Luckily, there is still a way to do this. In fact, F-'(U) ~ F, where F is the CDF of our target distribution, U is the uniform distribution and F-'(p) is the inverse function of F(x), also known as quantile function. This is also known as Probability Integral Transform (PIT).
Use PIT to generate N(0, 1) and standard exponential (1 = 1) from uniform distribution (but you are welcome to use any other method you come up with). Plot the histograms and compare with corresponding PDFs.
Hint: In MATLAB, norminv (p) will return F-1 (p) of standard normal and expinv (p) will return F-1(p) of standard exponential. Uniform samples can be generated by rand (m, n). In Python, this can be norm.ppf () for the inverse of the normal CDF.
Note: For the following exercises, you might need to use the Central Limit Theorem.
We will introduce the Central Limit Theorem in the lecture on Tuesday (Mar. 29).

'''

import numpy
import matplotlib.pyplot as plot

n = 50000
samples = numpy.random.randn(n)
# Generate random samples

plot.hist(samples, bins=100, density=True, alpha=0.5, label="Gaussian RV")
# Plot the histogram

x = numpy.linspace(-4, 4, 1000)
y = 1 / numpy.sqrt(2 * numpy.pi) * numpy.exp(-x ** 2 / 2)
plot.plot(x, y, color="blue", linewidth=2, label="Theoretical PDF")
# Plot the distribution's theoretical curve

plot.title("Standard Normal Distribution: n = 50,000")
plot.xlabel("Value")
plot.ylabel("Density")

plot.legend()
plot.show()
